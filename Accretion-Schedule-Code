This code is created from scratch by me using various python libraries. This calculates Accretion price as a fraction of $5,000 price multiple.

import os
import pandas as pd
import datetime
import numpy as np
import QuantLib as ql
pd.options.display.width = 0
pd.options.display.max_rows=100

print(os.getcwd())

dateparse = lambda x: pd.datetime.strptime(x, '%d/%m/%Y')

#Insert full path with file name.csv

df=pd.read_csv('Accretion Test.csv', parse_dates=['Issue_Date','Maturity_Date','First_Coupon_Date'], date_parser=dateparse)

import datetime
def ql_to_datetime(d):
    d=datetime.date(d.year(), d.month(), d.dayOfMonth())
    s=d.strftime("%d/%m/%Y")
    return datetime.datetime.strptime(s,"%d/%m/%Y")
columns=['ISIN', 'CUSIP', 'ACTION', 'LEG', 'ACCRETION METHOD',
       'ACCRETION START DATE', 'ACCRETED AMOUNT', 'END DATE', 'FREQUENCY',
       'RATE']

c=0
blank=pd.DataFrame(columns=['Dates','CUSIP','diff','Price'])
for index ,row in df.iterrows():
    if index==c:
        effective_date = ql.Date(row['Issue_Date'].day, row['Issue_Date'].month, row['Issue_Date'].year)
        termination_date = ql.Date(row['Maturity_Date'].day, row['Maturity_Date'].month, row['Maturity_Date'].year)
        first_date = ql.Date(row['First_Coupon_Date'].day, row['First_Coupon_Date'].month, row['First_Coupon_Date'].year)
        if row['Frequency']==6:
            tenor = ql.Period(ql.Semiannual)
        elif row['Frequency']==3:
            tenor=ql.Period(ql.Quarterly)
        calendar = ql.UnitedStates()
        business_convention = ql.Unadjusted
        termination_business_convention = ql.Unadjusted
        date_generation = ql.DateGeneration.Forward
        end_of_month = False
        
        schedule = ql.Schedule(effective_date,termination_date,tenor,calendar,business_convention,termination_business_convention,
                                    ql.DateGeneration.Backward,end_of_month,first_date)
        #schedule1=[ql.Date(d, '%d/%m/%Y') for d in schedule]         
        dates=pd.DataFrame({'ACCRETION START DATE':schedule}, index=range(len(schedule)))
        #dates=dates.drop(['date'], axis=1)
        dates['CUSIP']=row['CUSIP']
        dates['ACCRETION START DATE']=dates['ACCRETION START DATE'].apply(lambda x:ql_to_datetime(x))
        dates['END DATE']=dates['ACCRETION START DATE'].shift(-1)+pd.to_timedelta(-1, unit='d')
        dates['diff']= dates['ACCRETION START DATE'].apply(lambda x: (row['Maturity_Date']-x)/np.timedelta64(1,'Y'))
        if row['Frequency']==6:
            dates['ACCRETED AMOUNT']=round((5000/(1+(row['Accretion_Rate']/(100*2)))**(dates['diff']*2)),2)
            dates['FREQUENCY']='Semi'
        elif row['Frequency']==3:
            dates['ACCRETED AMOUNT']=round((5000/(1+(row['Accretion_Rate']/(100*4)))**(dates['diff']*2)),2)
            dates['FREQUENCY']='Qrtrly'
        dates['END DATE']=dates['END DATE'].fillna(dates['ACCRETION START DATE'].max())
        dates['RATE']=row['Accretion_Rate']
        blank=blank.append(dates)
        #blank.dropna()
        
        c+=1
blank['LEG']=blank.groupby(['CUSIP'])['ACCRETION START DATE'].cumcount()+1 
blank['ISIN']=''
blank['ACTION']='Insert'


'''blank.to_csv('Accretion_Schedule_Output.csv', index=False, columns=['ISIN', 'CUSIP', 'ACTION', 'LEG', 'ACCRETION METHOD',
       'ACCRETION START DATE', 'ACCRETED AMOUNT', 'END DATE', 'FREQUENCY',
       'RATE'],sep=',',date_format="'%d/%m/%Y",encoding='utf-8')
blank.to_excel(writer,sheet_name='Accretion_Schedule', 
               index=False,columns=['ISIN', 'CUSIP', 'ACTION', 'LEG', 'ACCRETION METHOD','ACCRETION START DATE', 'ACCRETED AMOUNT', 'END DATE', 'FREQUENCY', 'RATE'])#,encoding='utf-8')
pd.read_csv('Accretion_Schedule_Output.csv').head(100)'''

writer = pd.ExcelWriter("Accretion_Schedule_Output.xls",engine='xlsxwriter', datetime_format="mm/dd/yyyy")

blank.to_excel(writer,sheet_name='Accretion_Schedule', index=False,
               columns=['ISIN', 'CUSIP', 'ACTION', 'LEG', 'ACCRETION METHOD','ACCRETION START DATE', 'ACCRETED AMOUNT', 'END DATE', 'FREQUENCY', 'RATE'])
writer.save()

print('File Saved !!')
